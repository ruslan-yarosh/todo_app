{"version":3,"sources":["types/FilterType.ts","components/TodoHeader/TodoHeader.tsx","components/TodoItem/TodoItem.tsx","components/TodoList/TodoList.tsx","utils/getVisibleTodos.ts","components/TodoSection/TodoSection.tsx","components/Filter/Filter.tsx","components/TodoFooter/TodoFooter.tsx","App.tsx","utils/useLocalStorage.ts","index.tsx"],"names":["FilterType","TodoHeader","React","memo","todos","setTodos","useState","todoTitle","setTodoTitle","inputRef","useRef","useEffect","current","focus","className","onSubmit","event","preventDefault","trim","newTodo","id","Date","title","completed","type","data-cy","placeholder","ref","value","onChange","target","TodoItem","todo","isEditing","setIsEditing","setTitle","updateTitle","updatedTodos","map","item","filter","currnetTodo","classNames","editing","onDoubleClick","checked","aria-label","onClick","onKeyUp","code","onBlur","TodoList","TransitionGroup","component","CSSTransition","timeout","getVisibleTodos","path","allTodos","Active","Completed","TodoSection","isAllTodosActive","useMemo","every","pathname","useLocation","length","active","htmlFor","Object","values","element","Filter","to","isActive","selected","TodoFooter","todosLeft","App","key","initialValue","window","localStorage","getItem","JSON","parse","setValue","data","setItem","stringify","useLocalStorage","createRoot","document","getElementById","render"],"mappings":"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","file":"static/js/main.b29343ab.chunk.js","sourcesContent":["export enum FilterType {\n  All = '/',\n  Active = '/active',\n  Completed = '/completed',\n}\n","import React, {\n  ChangeEvent,\n  FormEvent,\n  useEffect,\n  useRef,\n  useState,\n} from 'react';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  todos: Todo[],\n  setTodos: (data: Todo[]) => void\n};\n\nexport const TodoHeader: React.FC<Props> = React.memo(({\n  todos,\n  setTodos,\n}) => {\n  const [todoTitle, setTodoTitle] = useState('');\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  useEffect(() => {\n    inputRef.current?.focus();\n  }, []);\n\n  const handleSubmit = (event: FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    if (!todoTitle.trim()) {\n      return;\n    }\n\n    const newTodo: Todo = {\n      id: +new Date(),\n      title: todoTitle,\n      completed: false,\n    };\n\n    setTodos([\n      ...todos,\n      newTodo,\n    ]);\n    setTodoTitle('');\n  };\n\n  const handleChange = (event: ChangeEvent<HTMLInputElement>) => (\n    setTodoTitle(event.target.value)\n  );\n\n  return (\n    <header className=\"header\">\n      <h1>todos</h1>\n\n      <form onSubmit={handleSubmit}>\n        <input\n          type=\"text\"\n          className=\"new-todo\"\n          data-cy=\"createTodo\"\n          placeholder=\"What needs to be done?\"\n          ref={inputRef}\n          value={todoTitle}\n          onChange={handleChange}\n        />\n      </form>\n    </header>\n  );\n});\n","import React, { useEffect, useRef, useState } from 'react';\nimport classNames from 'classnames';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  todo: Todo,\n  todos: Todo[]\n  setTodos: (data: Todo[]) => void\n};\n\nexport const TodoItem: React.FC<Props> = React.memo(({\n  todo,\n  todos,\n  setTodos,\n}) => {\n  const [isEditing, setIsEditing] = useState(false);\n  const [title, setTitle] = useState(todo.title);\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  useEffect(() => {\n    inputRef.current?.focus();\n  }, [isEditing]);\n\n  const handleTitleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setTitle(event.target.value);\n  };\n\n  const handleDoubleClick = () => setIsEditing(true);\n\n  const updateTitle = () => {\n    setIsEditing(false);\n\n    if (title === todo.title) {\n      return;\n    }\n\n    if (!title) {\n      const updatedTodos = todos.filter(currnetTodo => (\n        currnetTodo.id !== todo.id\n      ));\n\n      setTodos(updatedTodos);\n\n      return;\n    }\n\n    const updatedTodos = todos.map(item => {\n      if (todo.id !== item.id) {\n        return item;\n      }\n\n      return {\n        ...item,\n        title,\n      };\n    });\n\n    setTodos(updatedTodos);\n  };\n\n  const handleKeyUp = (event: React.KeyboardEvent<HTMLInputElement>) => {\n    if (event.code === 'Escape') {\n      setIsEditing(false);\n      setTitle(todo.title);\n    }\n\n    if (event.code === 'Enter') {\n      setIsEditing(false);\n      updateTitle();\n    }\n  };\n\n  const handleBlur = () => updateTitle();\n\n  const handleRemove = () => {\n    const updatedTodos = todos.filter(currnetTodo => (\n      currnetTodo.id !== todo.id\n    ));\n\n    setTodos(updatedTodos);\n  };\n\n  const handleCheckboxChange = () => {\n    const updatedTodos = todos.map(item => {\n      if (todo.id !== item.id) {\n        return item;\n      }\n\n      return {\n        ...item,\n        completed: !item.completed,\n      };\n    });\n\n    setTodos(updatedTodos);\n  };\n\n  return (\n    <li\n      className={classNames('todo', {\n        completed: todo.completed,\n        editing: isEditing,\n      })}\n      onDoubleClick={handleDoubleClick}\n    >\n      <div className=\"view\">\n        <input\n          type=\"checkbox\"\n          className=\"toggle\"\n          checked={todo.completed}\n          onChange={handleCheckboxChange}\n        />\n\n        <label>{todo.title}</label>\n\n        <button\n          type=\"button\"\n          aria-label=\"destroy\"\n          className=\"destroy\"\n          data-cy=\"deleteTodo\"\n          onClick={handleRemove}\n        />\n      </div>\n\n      {isEditing && (\n        <input\n          id=\"edit\"\n          type=\"text\"\n          className=\"edit\"\n          placeholder=\"Empty todo will be deleted\"\n          ref={inputRef}\n          value={title}\n          onChange={handleTitleChange}\n          onKeyUp={handleKeyUp}\n          onBlur={handleBlur}\n        />\n      )}\n    </li>\n  );\n});\n","import { FC } from 'react';\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\nimport { TodoItem } from '../TodoItem/TodoItem';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  todos: Todo[],\n  setTodos: (data: Todo[]) => void\n};\n\nexport const TodoList: FC<Props> = ({ todos, setTodos }) => {\n  return (\n    <TransitionGroup component=\"ul\" className=\"todo-list\" data-cy=\"todosList\">\n      {todos.map(todo => (\n        <CSSTransition\n          key={todo.id}\n          timeout={300}\n          classNames=\"item\"\n        >\n          <TodoItem\n            todo={todo}\n            todos={todos}\n            setTodos={setTodos}\n            key={todo.id}\n          />\n        </CSSTransition>\n      ))}\n    </TransitionGroup>\n  );\n};\n","import { FilterType } from '../types/FilterType';\nimport { Todo } from '../types/Todo';\n\nexport const getVisibleTodos = (path: string, allTodos: Todo[]) => {\n  switch (path) {\n    case FilterType.Active:\n      return allTodos.filter(todo => !todo.completed);\n\n    case FilterType.Completed:\n      return allTodos.filter(todo => todo.completed);\n\n    default:\n      return allTodos;\n  }\n};\n","import React, { useMemo } from 'react';\nimport { Route, Routes, useLocation } from 'react-router-dom';\nimport classNames from 'classnames';\nimport { Todo } from '../../types/Todo';\nimport { TodoList } from '../TodoList/TodoList';\nimport { getVisibleTodos } from '../../utils/getVisibleTodos';\nimport { FilterType } from '../../types/FilterType';\n\ntype Props = {\n  todos: Todo[],\n  setTodos: (data: Todo[]) => void\n};\n\nexport const TodoSection: React.FC<Props> = React.memo(({\n  todos,\n  setTodos,\n}) => {\n  const isAllTodosActive = useMemo(() => (\n    todos.every(todo => todo.completed)\n  ), [todos]);\n\n  const { pathname } = useLocation();\n\n  const handleToggleAll = () => {\n    if (isAllTodosActive) {\n      return setTodos(todos.map(todo => (\n        {\n          ...todo,\n          completed: false,\n        }\n      )));\n    }\n\n    return setTodos(todos.map(todo => (\n      todo.completed\n        ? todo\n        : {\n          ...todo,\n          completed: true,\n        }\n    )));\n  };\n\n  return (\n    <section className=\"main\">\n      {!!todos.length && (\n        <>\n          <input\n            type=\"checkbox\"\n            id=\"toggle-all\"\n            className={classNames('toggle-all', {\n              active: isAllTodosActive,\n            })}\n            data-cy=\"toggleAll\"\n            onChange={handleToggleAll}\n          />\n\n          <label htmlFor=\"toggle-all\">Mark all as complete</label>\n\n          <Routes>\n            {Object.values(FilterType).map(value => (\n              <Route\n                key={value}\n                path={value}\n                element={(\n                  <TodoList\n                    todos={getVisibleTodos(pathname, todos)}\n                    setTodos={setTodos}\n                  />\n                )}\n              />\n            ))}\n          </Routes>\n        </>\n      )}\n    </section>\n  );\n});\n","import classNames from 'classnames';\nimport React from 'react';\nimport { NavLink } from 'react-router-dom';\n\nexport const Filter: React.FC = React.memo(() => {\n  return (\n    <ul className=\"filters\" data-cy=\"todosFilter\">\n      <li>\n        <NavLink\n          to=\"/\"\n          className={({ isActive }) => classNames({\n            selected: isActive,\n          })}\n        >\n          All\n        </NavLink>\n      </li>\n\n      <li>\n        <NavLink\n          to=\"/active\"\n          className={({ isActive }) => classNames({\n            selected: isActive,\n          })}\n        >\n          Active\n        </NavLink>\n      </li>\n\n      <li>\n        <NavLink\n          to=\"/completed\"\n          className={({ isActive }) => classNames({\n            selected: isActive,\n          })}\n        >\n          Completed\n        </NavLink>\n      </li>\n    </ul>\n  );\n});\n","import React, { useMemo } from 'react';\nimport { Todo } from '../../types/Todo';\nimport { Filter } from '../Filter/Filter';\n\ntype Props = {\n  todos: Todo[],\n  setTodos: (data: Todo[]) => void\n};\n\nexport const TodoFooter: React.FC<Props> = React.memo(({\n  todos,\n  setTodos,\n}) => {\n  const todosLeft = useMemo(() => (\n    todos.filter(todo => !todo.completed).length\n  ), [todos]);\n\n  const handleClearCompleted = () => {\n    const updatedTodos = todos.filter(todo => !todo.completed);\n\n    setTodos(updatedTodos);\n  };\n\n  return (\n    <footer className=\"footer\">\n      <span className=\"todo-count\" data-cy=\"todosCounter\">\n        {\n          todosLeft === 1\n            ? `${todosLeft} item left`\n            : `${todosLeft} items left`\n        }\n      </span>\n\n      <Filter />\n\n      {todos.length !== todosLeft && (\n        <button\n          type=\"button\"\n          className=\"clear-completed\"\n          onClick={handleClearCompleted}\n        >\n          Clear completed\n        </button>\n      )}\n    </footer>\n  );\n});\n","import React from 'react';\nimport { TodoHeader } from './components/TodoHeader/TodoHeader';\nimport { TodoSection } from './components/TodoSection/TodoSection';\nimport { TodoFooter } from './components/TodoFooter/TodoFooter';\nimport { useLocalStorage } from './utils/useLocalStorage';\nimport { Todo } from './types/Todo';\n\nexport const App: React.FC = () => {\n  const [todos, setTodos] = useLocalStorage<Todo[]>('todos', []);\n\n  return (\n    <div className=\"todoapp\">\n      <TodoHeader\n        todos={todos}\n        setTodos={setTodos}\n      />\n\n      <TodoSection\n        todos={todos}\n        setTodos={setTodos}\n      />\n\n      {!!todos.length && (\n        <TodoFooter\n          todos={todos}\n          setTodos={setTodos}\n        />\n      )}\n    </div>\n  );\n};\n","import { useState } from 'react';\n\nexport const useLocalStorage = <T>(key: string, initialValue: T):\n[T, (data: T) => void] => {\n  const [value, setValue] = useState<T>(() => {\n    const item = window.localStorage.getItem(key);\n\n    return item ? JSON.parse(item) : initialValue;\n  });\n\n  const save = (data: T) => {\n    setValue(data);\n    window.localStorage.setItem(key, JSON.stringify(data));\n  };\n\n  return [value, save];\n};\n","import { createRoot } from 'react-dom/client';\nimport { HashRouter } from 'react-router-dom';\n\nimport './styles/index.css';\nimport './styles/todo-list.css';\nimport './styles/filters.css';\n\nimport { App } from './App';\n\ncreateRoot(document.getElementById('root') as HTMLDivElement)\n  .render(\n    <HashRouter>\n      <App />\n    </HashRouter>,\n  );\n"],"sourceRoot":""}